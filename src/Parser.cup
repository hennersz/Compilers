import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token) {
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
        + current_token.right, null
    );
    syntaxErrors = true;
  }
:}

// Terminals
// Primitives
terminal BOOL, INT, RAT, FLOAT, CHAR;

// Bool operators
terminal NOT, AND, OR;

// Arithmetic operators
terminal PLUS, MINUS, TIMES, DIV, POW;

// Comparisons
terminal LTHAN, LTHANEQ, EQUALS, NEQUALS;

// Aggregate keywords
terminal DICT, SEQ, TOP, STR;

// Operations on Aggregate
terminal APPEND, LEN, IN;

// Declarations
terminal TDEF, FDEF, ALIAS;

// IO Functions
terminal READ, PRINT;

// Control flow
terminal IF, ELIF, ELSE, THEN, ENDIF, WHILE, DO, ENDDO, FORALL;

// Return statement
terminal RETURN;

// Literals
terminal BOOL_LIT, CHAR_LIT, INT_LIT, RAT_LIT, FLOAT_LIT, STR_LIT;

// Identifier
terminal ID;

// Other
terminal RANGBR, LPAREN, RPAREN, ASSIGN, LBRACK, RBRACK, LBRACE, RBRACE, COMMA, SEMICOL, COL;

// Non Terminals
nonterminal program, block, function, declaration;

nonterminal primarytype;

// Precedences
precedence left PLUS, MINUS, TIMES, DIV, AND, OR, APPEND, COMMA;
precedence right POW, IN, ASSIGN;
precedence nonassoc NOT, LTHAN, LTHANEQ, EQUALS, NEQUALS

// Main logic

program ::= begin main begin;

begin ::= funcdeclaration begin 
    | TDEF ID //TODO 
    | vardeclaration begin
    |
    ;

// Function declarations
//-----------------------------
fundeclaration = FDEF type ID LPAREN paramlist RPAREN LBRACE block RBRACE SEMICOL;

// Variable declarations
//-----------------------------
vardeclaration ::= type ID init; 

type ::= primarytype 
       | aggregatetype
       ;

// This is used because we don't want declarations like
// top x = 5, since we use top only in dict/seq
aggtype ::= type 
          | top
          ;

primarytype ::=  BOOL | INT | RAT | FLOAT | CHAR;

aggregatetype ::= dict | seq | STR ;

dict ::= DICT LTHAN aggtype COMMA aggtype RANGBR;

seq ::= SEQ LTHAN aggtype RANGBR;

// Initialiazation of variables
//-----------------------------

value ::= primaryvalue | aggregatevalue;

// Initialization and assignment
primaryvalue ::= BOOL_LIT
                | CHAR_LIT
                | INT_LIT
                | RAT_LIT
                | FLOAT_LIT
                ;

aggregatevalue ::= dictvalue
                | seqvalue
                ;

dictvalue ::= LTHAN agglist RANGBR;

seqvalue ::=  LBRACK agglist RANGBR;

vallist ::= value
          | agglist COMMA value 
          ;
